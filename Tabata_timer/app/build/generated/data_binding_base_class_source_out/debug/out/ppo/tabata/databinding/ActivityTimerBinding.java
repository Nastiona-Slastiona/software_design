// Generated by view binder compiler. Do not edit!
package ppo.tabata.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import ppo.tabata.R;

public final class ActivityTimerBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView currText;

  @NonNull
  public final AppCompatButton next;

  @NonNull
  public final TextView nextText;

  @NonNull
  public final AppCompatButton prev;

  @NonNull
  public final LinearLayout prevNext;

  @NonNull
  public final TextView prevText;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final ImageButton runStop;

  @NonNull
  public final TextView time;

  private ActivityTimerBinding(@NonNull ConstraintLayout rootView, @NonNull TextView currText,
      @NonNull AppCompatButton next, @NonNull TextView nextText, @NonNull AppCompatButton prev,
      @NonNull LinearLayout prevNext, @NonNull TextView prevText, @NonNull ProgressBar progressBar,
      @NonNull ImageButton runStop, @NonNull TextView time) {
    this.rootView = rootView;
    this.currText = currText;
    this.next = next;
    this.nextText = nextText;
    this.prev = prev;
    this.prevNext = prevNext;
    this.prevText = prevText;
    this.progressBar = progressBar;
    this.runStop = runStop;
    this.time = time;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityTimerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityTimerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_timer, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityTimerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.curr_text;
      TextView currText = rootView.findViewById(id);
      if (currText == null) {
        break missingId;
      }

      id = R.id.next;
      AppCompatButton next = rootView.findViewById(id);
      if (next == null) {
        break missingId;
      }

      id = R.id.next_text;
      TextView nextText = rootView.findViewById(id);
      if (nextText == null) {
        break missingId;
      }

      id = R.id.prev;
      AppCompatButton prev = rootView.findViewById(id);
      if (prev == null) {
        break missingId;
      }

      id = R.id.prev_next;
      LinearLayout prevNext = rootView.findViewById(id);
      if (prevNext == null) {
        break missingId;
      }

      id = R.id.prev_text;
      TextView prevText = rootView.findViewById(id);
      if (prevText == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = rootView.findViewById(id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.run_stop;
      ImageButton runStop = rootView.findViewById(id);
      if (runStop == null) {
        break missingId;
      }

      id = R.id.time;
      TextView time = rootView.findViewById(id);
      if (time == null) {
        break missingId;
      }

      return new ActivityTimerBinding((ConstraintLayout) rootView, currText, next, nextText, prev,
          prevNext, prevText, progressBar, runStop, time);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
